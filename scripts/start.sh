#!/bin/bash

# Script para inicializar a aplica√ß√£o Aloy
# Uso: ./scripts/start.sh [ambiente]
# Ambientes: dev (padr√£o), prod

set -e

ENVIRONMENT=${1:-dev}
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
cd "$PROJECT_ROOT"

echo "üöÄ Iniciando Aloy em modo $ENVIRONMENT..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARN: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
}

# Verificar se Docker est√° rodando
if ! docker info > /dev/null 2>&1; then
    error "Docker n√£o est√° rodando. Por favor, inicie o Docker."
    exit 1
fi

# Verificar se docker-compose est√° instalado
if ! command -v docker-compose > /dev/null 2>&1; then
    error "docker-compose n√£o est√° instalado."
    exit 1
fi

# Fun√ß√£o para aguardar servi√ßo ficar dispon√≠vel
wait_for_service() {
    local service=$1
    local port=$2
    local max_attempts=30
    local attempt=1

    log "Aguardando $service ficar dispon√≠vel na porta $port..."
    
    while [ $attempt -le $max_attempts ]; do
        if nc -z localhost $port > /dev/null 2>&1; then
            log "$service est√° dispon√≠vel!"
            return 0
        fi
        
        echo -n "."
        sleep 2
        attempt=$((attempt + 1))
    done
    
    error "$service n√£o ficou dispon√≠vel ap√≥s $((max_attempts * 2)) segundos"
    return 1
}

# Limpar containers antigos se existirem
log "Limpando containers antigos..."
docker-compose down > /dev/null 2>&1 || true
docker-compose -f docker-compose.dev.yml down > /dev/null 2>&1 || true

# Verificar disponibilidade de portas
log "Verificando disponibilidade de portas..."
if ! ./scripts/check-ports.sh > /dev/null 2>&1; then
    warn "Algumas portas podem estar em uso. Continuando mesmo assim..."
    echo "Execute 'make check-ports' para ver detalhes"
fi

if [ "$ENVIRONMENT" = "dev" ]; then
    log "Iniciando servi√ßos de desenvolvimento..."
    docker-compose -f docker-compose.dev.yml up -d
    
    # Carregar vari√°veis de ambiente
    if [ -f ".env" ]; then
        source .env
    fi
    
    # Aguardar servi√ßos ficarem dispon√≠veis
    wait_for_service "PostgreSQL" "${POSTGRES_PORT:-1700}"
    wait_for_service "RabbitMQ" "${RABBITMQ_AMQP_PORT:-1800}"
    wait_for_service "Redis" "${REDIS_PORT:-6379}"
    
    echo ""
    log "‚úÖ Servi√ßos de desenvolvimento iniciados com sucesso!"
    echo ""
    echo "üìä Servi√ßos dispon√≠veis:"
    echo "  üêò PostgreSQL: localhost:${POSTGRES_PORT:-1700}"
    echo "  üê∞ RabbitMQ Management: http://localhost:${RABBITMQ_UI_PORT:-1801} (${RABBITMQ_USER:-aloy}/${RABBITMQ_PASSWORD:-aloy123})"
    echo "  üî¥ Redis: localhost:${REDIS_PORT:-6379}"
    echo ""
    echo "Para iniciar os servi√ßos da aplica√ß√£o, execute:"
    echo "  cd apps/core && go run cmd/main.go"
    echo "  cd modules/nlp && python run.py"
    echo "  cd modules/scheduler && npm run dev"
    echo "  cd modules/sysmonitor && go run cmd/main.go"
    echo "  cd modules/tasksync && go run cmd/main.go"
    
elif [ "$ENVIRONMENT" = "prod" ]; then
    log "Iniciando ambiente de produ√ß√£o..."
    
    # Carregar vari√°veis de ambiente
    if [ -f ".env" ]; then
        source .env
    fi
    
    # Verificar se as imagens existem, sen√£o construir
    log "Construindo imagens Docker..."
    docker-compose build
    
    # Iniciar todos os servi√ßos
    docker-compose up -d
    
    # Aguardar servi√ßos ficarem dispon√≠veis
    wait_for_service "PostgreSQL" "${POSTGRES_PORT:-1700}"
    wait_for_service "RabbitMQ" "${RABBITMQ_AMQP_PORT:-1800}"
    wait_for_service "Redis" "${REDIS_PORT:-6379}"
    wait_for_service "Core API" "${ALOY_CORE_PORT:-1100}"
    wait_for_service "NLP Service" "${ALOY_NLP_PORT:-1200}"
    wait_for_service "System Monitor" "${ALOY_SYSTEM_MONITOR_PORT:-1300}"
    wait_for_service "Nginx" 80
    
    echo ""
    log "‚úÖ Aplica√ß√£o Aloy iniciada com sucesso!"
    echo ""
    echo "üåê Servi√ßos dispon√≠veis:"
    echo "  üöÄ API Principal: http://localhost (via Nginx)"
    echo "  üß† NLP Service: http://localhost/nlp"
    echo "  üìä System Monitor: http://localhost/monitor"
    echo "  ‚è∞ Scheduler: http://localhost/scheduler"
    echo "  üîÑ Task Sync: http://localhost/tasksync"
    echo "  üê∞ RabbitMQ Management: http://localhost:${RABBITMQ_UI_PORT:-1801} (${RABBITMQ_USER:-aloy}/${RABBITMQ_PASSWORD:-aloy123})"
    echo ""
    echo "Para ver logs: docker-compose logs -f [servi√ßo]"
    echo "Para parar: ./scripts/stop.sh"
    
else
    error "Ambiente inv√°lido: $ENVIRONMENT. Use 'dev' ou 'prod'."
    exit 1
fi

echo ""
log "üéâ Script conclu√≠do!"
